"use client";
import { useState } from "react";
import Head from "next/head";
import "@/styles/Home.module.css";
import UploadButton from "@/components/UploadButton";
import Sidebar from "@/components/Sidebar";
import Loader from "@/components/Loader";
import axios from "axios";
import toast, { Toaster } from "react-hot-toast";
import { useRouter } from "next/navigation";
import Button from "@mui/material/Button";

export default function Home() {
  const router = useRouter();

  const [selectedFiles1, setSelectedFiles1] = useState<File[]>([]);
  const [selectedFiles2, setSelectedFiles2] = useState<File[]>([]);
  const [selectedFiles3, setSelectedFiles3] = useState<File[]>([]);
  const [isLoadingGeneration, setIsLoadingGeneration] = useState(false);

  const handleUploadClick = async () => {
    if (selectedFiles1[0].name != "horario.csv") {
      toast.error(
        "Invalid file name for schedule. Please select 'horario.csv'."
      );
      return;
    }

    if (selectedFiles2[0].name != "inscritos_anon.csv") {
      toast.error(
        "Invalid file name for students. Please select 'inscritos_anon.csv'."
      );
      return;
    }

    if (selectedFiles3[0].name != "salas.csv") {
      toast.error("Invalid file name for rooms. Please select 'salas.csv'.");
      return;
    }

    [selectedFiles1, selectedFiles2, selectedFiles3].forEach(
      async (selectedFiles) => {
        if (selectedFiles) {
          const formData = new FormData();

          Array.from(selectedFiles).forEach((file) => {
            formData.append("file", file);
          });

          const response = await axios.post("/api/upload", formData);
          console.log(response.data);

          // Error handling for file upload
          if (response.data.message === "No file uploaded.") {
            toast.error("No file uploaded. Please select a file.");
          }
        }
      }
    );
  };

  const handleGenerateClick = () => {
    console.log("Generate button clicked");
    setIsLoadingGeneration(true);
    fetch("/api/generate_schedule", { method: "POST" })
      .then((response) => {
        setIsLoadingGeneration(false);
        if (response.status === 200) {
          console.log("main.py executed");
          toast.success("Generation successful!");

          // Once the schedule is generated, call the generate_shift_allocation api route
          axios
            .post("api/generate_shift_allocation")
            .then((response) => {
              if (response.status === 200) {
                axios.post("/api/students").catch((error) => {
                  console.error(error);
                  toast.error(
                    "An error occurred during students JSON file creation."
                  );
                });
              } else {
                toast.error("Shift allocation generation failed!");
              }
            })
            .catch((error) => {
              console.error(error);
              toast.error(
                "An error occurred during shift allocation generation."
              );
            });
        } else {
          toast.error("Generation failed!");
        }
      })
      .catch((error) => {
        console.error(error);
        toast.error("An error occurred during generation.");
      });
  };

  return (
    <div className="flex">
      <Toaster
        position="bottom-right"
        toastOptions={{
          duration: 3000,
        }}
        reverseOrder={false}
      />
      <Head>
        <title>NECChange</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="logos/necc-blue.svg" />
      </Head>
      <Sidebar activeTab="Upload" />
      <main className="flex-grow flex flex-col items-center justify-center pt-12 h-screen space-y-4">
        <h1 className="mb-4 text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl">
          Upload{" "}
          <span className="underline underline-offset-3 decoration-8 decoration-blue-400">
            Files
          </span>
        </h1>
        <p className="text-lg font-normal text-gray-500 lg:text-xl">
          Files should have the .csv extension and follow the specified format
          in the user guide.
        </p>
        <div className="flex space-x-4">
          <div>
            <label className="block text-gray-700 font-bold mb-2">
              Schedule
            </label>
            <UploadButton label="Schedule" onFilesSelect={setSelectedFiles1} />
          </div>
          <div>
            <label className="block text-gray-700 font-bold mb-2">
              Students
            </label>
            <UploadButton label="Students" onFilesSelect={setSelectedFiles2} />
          </div>
          <div>
            <label className="block text-gray-700 font-bold mb-2">Rooms</label>
            <UploadButton label="Rooms" onFilesSelect={setSelectedFiles3} />
          </div>
        </div>
        <button
          onClick={() => router.push("/restrictions")}
          className="relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-cyan-500 to-blue-500 group-hover:from-cyan-500 group-hover:to-blue-500 hover:text-white  focus:ring-4 focus:outline-none focus:ring-cyan-200"
        >
          <span className="relative px-5 py-2.5 transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-opacity-0">
            Make Restrictions
          </span>
        </button>
        <button
          onClick={() => {
            handleUploadClick()
              .then(() => {
                toast.success(
                  "Files uploaded successfully! Solver will start in 2 seconds..."
                );

                // Just to make sure the files are uploaded before starting the solver
                setTimeout(() => {
                  toast.success(
                    "Solver started. Please wait, this may take a while..."
                  );
                  handleGenerateClick();
                }, 2000);
              })
              .catch((error) => {
                console.error("Error uploading files:", error);
                toast.error("An error occurred during file upload.");
              });
          }}
          className="relative inline-flex items-center justify-center p-0.5 mb-2 mr-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-cyan-500 to-blue-500 group-hover:from-cyan-500 group-hover:to-blue-500 hover:text-white  focus:ring-4 focus:outline-none focus:ring-cyan-200"
        >
          <span className="relative px-5 py-2.5 transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-opacity-0">
            Generate
          </span>
        </button>

        {isLoadingGeneration && <Loader />}
      </main>
    </div>
  );
}
